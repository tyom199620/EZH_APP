"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fontawesome_svg_core_1 = require("@fortawesome/fontawesome-svg-core");
var react_1 = tslib_1.__importDefault(require("react"));
var _converter_1 = require("./@converter");
var _logger_1 = require("./@logger");
var _utils_1 = require("./@utils");
// tslint:disable-next-line: no-null-keyword
var convertCurry = _converter_1.convert.bind(null, react_1.default.createElement);
exports.DEFAULT_SIZE = 16;
exports.DEFAULT_COLOR = '#000';
exports.FontAwesomeIcon = function (props) {
    var iconArgs = props.icon, maskArgs = props.mask, style = props.style, size = props.size;
    if (style === undefined) {
        style = {};
    }
    var iconLookup = _utils_1.normalizeIconArgs(iconArgs);
    if (!iconLookup) {
        _logger_1.error('ERROR: icon format not valid for icon = ', iconLookup);
        return undefined;
    }
    var transform = _utils_1.objectWithKey('transform', typeof props.transform === 'string'
        ? fontawesome_svg_core_1.parse.transform(props.transform)
        : props.transform);
    var mask = _utils_1.objectWithKey('mask', _utils_1.normalizeIconArgs(maskArgs));
    var renderedIcon = fontawesome_svg_core_1.icon(iconLookup, tslib_1.__assign({}, transform, mask));
    if (!renderedIcon) {
        _logger_1.error('ERROR: icon not found for icon = ', iconArgs);
        return undefined;
    }
    var abstract = renderedIcon.abstract;
    var color = props.color || (style && style.color) || exports.DEFAULT_COLOR;
    var _a = style, _ = _a.color, modifiedStyle = tslib_1.__rest(_a, ["color"]);
    size = size || exports.DEFAULT_SIZE;
    var extraProps = {
        height: size,
        width: size,
        fill: color,
        style: modifiedStyle,
    };
    for (var _i = 0, _b = Object.keys(props); _i < _b.length; _i++) {
        var key = _b[_i];
        if (!['icon', 'mask', 'size', 'color', 'transform', 'style'].includes(key)) {
            extraProps[key] = props[key];
        }
    }
    return convertCurry(abstract[0], extraProps);
};
